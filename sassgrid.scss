// Sass Grid

// Repository: https://github.com/thiamsantos/sassgrid.git
// Author: Thiago Santos
// Version: 0.1
// Licence: MIT - https://github.com/thiamsantos/sassgrid/LICENSE

// Variables
//------------------------------------------------//
$gutter-width: 1rem;
$num-cols: 12;

// Box Model
// ------------------------------------------------//
* {
  box-sizing: border-box;
}

// Prefixer
// ------------------------------------------------//
@mixin flexbox() {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
  $fg-boxflex: $fg;
  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

@mixin flex-flow($value) {
  -webkit-flex-flow: $value;
  -ms-flex-flow: $value;
  flex-flow: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  }
  @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  }
  @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  }
  @else if $value == space-around {
    -ms-flex-pack: distribute;
  }
  @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  }
  @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  }
  @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  }
  @else if $value == flex-end {
    -ms-flex-line-pack: end;
  }
  @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// Row
//------------------------------------------------//
%row {
  @include flexbox();
  @include flex(0 1 auto);
  @include flex-flow(row wrap);
  margin: 0 - $gutter-width / 2 $gutter-width - $gutter-width / 2;
}

// Gutter
//------------------------------------------------//
%gutter {
  padding: 0 $gutter-width / 2;
}

// Columns
//------------------------------------------------//

// mixin
@mixin col($col: flex) {
  @if $col == flex {
    @include flex(1);
  }
  @else if unit($col) == "" and $col >= 1 and $col <= $num-cols {
    $perc: 100% / ($num-cols / $col);
    @include flex(0 0 $perc);
  }
  @else {
    @include flex(1 0 $col);
  }
  @extend %gutter;
}

// extends the mixin
%col-flex {
  @include col;
}

@for $i from 1 through $num-cols {
  %col-#{$i} {
    @include col($i);
  }
}

// Offset
//------------------------------------------------//

@for $i from 1 through $num-cols - 1 {
  // mixin
  @mixin offset($number-of-offset) {
    margin-left: 100% / ($num-cols / $number-of-offset);
  }
  // extends the mixin
  %offset-#{$i} {
    @include offset($i);
  }
}

// Flex Container
//------------------------------------------------//

// mixin
@mixin justify($content-value) {
  @if $content-value == left {
    @include justify-content(flex-start);
    text-align: start;
  }
  @if $content-value == right {
    @include justify-content(flex-end);
    text-align: end;
  }
  @if $content-value == center {
    @include justify-content(center);
    text-align: center;
  }
  @if $content-value == between {
    @include justify-content(space-between);
  }
  @if $content-value == around {
    @include justify-content(space-around);
  }
}

// extends the mixin
%justify-left {
  @include justify(left);
}

%justify-right {
  @include justify(right);
}

%justify-center {
  @include justify(center);
}

%justify-between {
  @include justify(between);
}

%justify-around {
  @include justify(around);
}

// Flex Itens
//------------------------------------------------//

// mixin
@mixin vertical-align($vertical-value) {
  @if $vertical-value == top {
    @include align-items(flex-start);
    @include align-content(flex-start);
  }
  @if $vertical-value == middle {
    @include align-items(center);
    @include align-content(center);
  }
  @if $vertical-value == bottom {
    @include align-items(flex-end);
    @include align-content(flex-end);
  }
}

// extends the mixin
%vertical-align-top {
  @include vertical-align(top);
}

%vertical-align-middle {
  @include vertical-align(middle);
}

%vertical-align-bottom {
  @include vertical-align(bottom);
}
